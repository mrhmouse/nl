(load-native 'core.o
  (nl_mul . *)
  (nl_add . +)
  (nl_sub . -)
  (nl_div . /)
  (nl_lt . <)
  (nl_lte . <=)
  (nl_equal . =)
  (nl_gt . >)
  (nl_gte . >=)
  (nl_and . and)
  (nl_apply . apply)
  (nl_defq . defq)
  (nl_eval . eval)
  (nl_exit . exit)
  (nl_filter . filter)
  (nl_fold . fold)
  (nl_foreach . for-each)
  (nl_head . head)
  (nl_is_integer . integer?)
  (nl_length . length)
  (nl_list . list)
  (nl_map . map)
  (nl_mappair . map-pair)
  (nl_is_nil . nil?)
  (nl_not . not)
  (nl_or . or)
  (nl_pair . pair)
  (nl_is_pair . pair?)
  (nl_print . print)
  (nl_set . set)
  (nl_set_head . set-head)
  (nl_set_tail . set-tail)
  (nl_setq . setq)
  (nl_is_symbol . symbol?)
  (nl_tail . tail)
  (nl_unfold . unfold)
  (nl_write . write)
  (nl_write_bytes . write-bytes))
(defq newline ()
  (write-bytes 10))
(defq if IfThenElse
  ('((@ Result)
     (and @ (setq Result (eval (head (tail IfThenElse)))))
     (or @ (setq Result (eval (head (tail (tail IfThenElse))))))
     Result)
   (eval (head IfThenElse))))
(defq max Items
  (fold '((A B) (if (> A B) A B)) () (map eval Items)))
(defq min Items
  (and (pair? Items)
       (fold '((A B) (if (< A B) A B))
             (eval (head Items))
             (map eval (tail Items)))))
(defq unquote (Form)
  (if (pair? Form)
      (if (= 'unquote (head Form))
          (eval (tail Form))
          (map 'unquote Form))
      Form))
